<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Geekheads]]></title>
  <link href="http://jacklund.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://jacklund.github.io/"/>
  <updated>2014-04-13T21:23:25-05:00</updated>
  <id>http://jacklund.github.io/</id>
  <author>
    <name><![CDATA[Jack Lund]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Falling in Love with Git]]></title>
    <link href="http://jacklund.github.io/blog/2013/05/07/Falling-in-Love-with-Git/"/>
    <updated>2013-05-07T17:00:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/05/07/Falling-in-Love-with-Git</id>
    <content type="html"><![CDATA[<p>As I mentioned earlier, we’re transitioning from subversion to git, and one of the things we need to do is convert from many-projects-per-repository, which is what we had in subversion, to one-project-per-repository for git. This is partly to make things nicer, and partly because it will make <a href="http://jenkins-ci.org/">Jenkins</a> work better. So, thinking in subversion-terms, I thought I’d have to do it myself, and even tried by renaming all the files in one of the projects into the upper-level directory, removing all the other projects, committing locally, and then pushing to a new repo. Royal pain.</p>

<p>And then, I came across <a href="https://help.github.com/articles/splitting-a-subpath-out-into-a-new-repository">this</a>. Oh. My. God. Git actually does the work for you. It’s so easy, you just do the <code>git filter-branch</code> command, and suddenly your project is its own repository! Then, you just change the remote repository (<code>git remote rm origin</code> followed by <code>git remote add</code> <em>new-url</em>), and Bob’s your uncle, you have a new, smaller repository.</p>

<p>I mean, seriously? That is AWESOME!</p>

<p>So, to be explicit, here’s the series of commands:</p>

<p><code>bash
    $ git clone repo-url
    $ cd repo
    $ git filter-branch --prune-empty --subdirectory-filter subdir-name master
    $ git remote rm origin
    $ git remote add new-repo-url
    $ git push -u origin --all --tags
</code></p>

<p><strong>Updated 05/12/2013</strong>
Okay, after messing around with this for some time, I’ve discovered that the above doesn’t work quite right, because the pathnames in the commits are wrong - instead of being <em>subdir-name</em><code>/src/foo/Bar.java</code>, it ends up being <code>src/foo/Bar.java</code>, which doesn’t work. So, instead of trying to pull each subdirectory into their own repository, I’m taking the existing repository, with a bunch of subdirs, including the ones I’m interested in, and simply using <code>git filter-branch</code> to get rid of the ones I’m not interested in, as well as update the tags. So, here’s what I’ve got now, which seems to work well:</p>

<p><code>bash
    # Get a list of the directories I'm not interested in
    $ excludes=`echo $* | tr " " "|"`
    $ files=`ls | egrep -v $excludes | tr "\\n" " "`
    # Disconnect from remote for safety
    $ git remote rm origin
    # Get rid of all tags that don't fit my pattern
    $ git tag -l | grep -v $pattern | xargs git tag -d
    # Prune the directories I'm not interested in
    $ git filter-branch --tag-name-filter cat --prune-empty \
        --tree-filter "rm -rf ${files}" -- --all
    # Reset the indexes
    $ git reset --hard
    # Get rid of obsolete references in the logs
    $ git for-each-ref --format="%(refname)" refs/original/ | \
        xargs -n 1 git update-ref -d
    $ git reflog expire --expire=now --all
    $ git gc --aggressive --prune=now
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Jenkins on Windows Working with Git]]></title>
    <link href="http://jacklund.github.io/blog/2013/05/06/Getting-Jenkins-on-Windows-Working-with-Git/"/>
    <updated>2013-05-06T20:46:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/05/06/Getting-Jenkins-on-Windows-Working-with-Git</id>
    <content type="html"><![CDATA[<p>We’re transitioning, as a company, from Subversion to Git, which is a Good Thing, but has its complications. One of them was getting <a href="http://jenkins-ci.org/">Jenkins</a>, which we use for <a href="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a>, to work with our Git repositories.</p>

<p>I had started out by thinking that I would have to create a user in our repository provider (we’re using <a href="http://bitbucket.org">BitBucket</a>) which would have read permisisons to our repositories, a “jenkins” user. Turns out its not the case. All you need to do for read-only access is to generate SSH keys that you register with the repository, and which Jenkins uses to clone the repository.</p>

<p>On Linux, this would be trivial. On Windows, of course, very little is trivial.</p>

<p>So, following <a href="http://computercamp.cdwilson.us/jenkins-git-clone-via-ssh-on-windows-7-x64">this guide</a>(with some modifications) I managed it this way:</p>

<ol>
  <li>Install <a href="http://git-scm.com/downloads">Git</a></li>
  <li>Generate the new SSH keys on my local machine using <code>ssh-keygen</code>. Make sure to specify a file <strong>other</strong> than the default (unless you like the idea of overwriting any existing keys you might have).</li>
  <li>Install the public key in the repository. In BitBucket, you do this under the account settings for the user or group who owns the repositories. Do it at the user/group level, not at the repository level (unless you want separate keys for each repository). Just cut and paste the contents of the public key to the web page, and click “Add”</li>
  <li>Install <a href="http://technet.microsoft.com/en-us/sysinternals/bb896649.aspx">PsTools</a> (<em>Note</em>: the link given in the guide mentioned above didn’t work for me). Extract the zip file wherever you want (I put mine in the root dir)</li>
  <li>Run the following in a command shell <em>running as administrator</em>: <code>\PsTools\PsExec.exe -i -s cmd.exe</code> (<em>Note:</em> the guide says use a normal shell, but that will fail the first time, because it tries to instal something that needs Admin privileges). To do this, find the command shell icon in the menu, right-click, and select <em>Run as Administrator…</em>.</li>
  <li>Do <code>echo %USERPROFILE%</code> in the shell to find out where the system user (and, hence, Jenkins) runs from as its home directory. Mine turned out to be <code>C:\Windows\system32\config\systemprofile</code>. YMMV.</li>
  <li>Make a folder named <code>.ssh</code> in that home directory</li>
  <li>Copy the keys (private and public) to the Windows machine in the <code>.ssh</code> folder</li>
  <li>Run <code>"C:\Program Files(x86)\Git\bin\ssh.exe" -T git@bitbucket.org</code> (<em>Note:</em> the location of git on your install may be different than mine). When you get the usual “unknown host” warning, type “yes” to get the server key in your known_hosts file</li>
  <li>Finally, test git by doing a <code>git ls-remote git@bitbucket.org:repo.git HEAD</code></li>
</ol>
]]></content>
  </entry>
  
</feed>
