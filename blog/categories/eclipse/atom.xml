<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: eclipse | Geekheads]]></title>
  <link href="http://jacklund.github.io/blog/categories/eclipse/atom.xml" rel="self"/>
  <link href="http://jacklund.github.io/"/>
  <updated>2014-04-13T21:23:25-05:00</updated>
  <id>http://jacklund.github.io/</id>
  <author>
    <name><![CDATA[Jack Lund]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala Is Disappointing]]></title>
    <link href="http://jacklund.github.io/blog/2013/06/25/Scala-Is-Disappointing/"/>
    <updated>2013-06-25T00:15:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/06/25/Scala-Is-Disappointing</id>
    <content type="html"><![CDATA[<p>So, I’ve been playing around with Scala, and, while I’m quite impressed with the language syntax, it’s a real pain-in-the-ass to deal with. To begin with, the various versions (2.7, 2.8, 2.9., 2.10) are <a href="http://lift.la/scalas-version-fragility-make-the-enterprise">binary incompatible</a>, which is really annoying. I understand that the language is still in development, but you would think they’d have the core of the language all worked out by now.</p>

<p>I understand the <a href="http://suereth.blogspot.com/2011/12/scala-fresh-is-alive.html">reasons behind it</a>: they’re still making changes to the base traits which causes all the objects to change. But, really, this is one of those things that every language (well, every language with a base class or interface) goes through. These are the things you go through, however, when you’re doing the pre-1.0 releases of the language, not 2.x; at most, you make these changes when you transition between major revisions - from 2.x to 3.0, for instance - <em>not</em> between minor revisions.</p>

<p>What concerns me with this, besides the PIA factor, is that a) the language developers don’t seem to think this is a problem, and b) that it indicates a tendency to want to “fiddle” with the language. I understand the desire to “fiddle”, it’s one of those things that every software developer goes through, the desire to “tweak it just a little bit more” after it’s released. It’s also one of those things that mature software developers grow out of. “The perfect is the enemy of the good”.</p>

<p>They don’t seem to realize that this is going to make it <em>really</em> hard for it to be taken seriously as a general-purpose language. When you’re trying to make a business case for using a new language, one of the things that you have to demonstrate is that the language is mature enough to not change out from under you. Scala is changing constantly, and the Scala developers seem to think this is a virtue, rather than a problem.</p>

<p>Why is this a problem? Well, the fact that you have Scala libraries having to label themselves with the version of Scala they’re compiled against is an immediate indication. If I’m trying to do a project that’s dependent on libraries, I now have to make absolutely sure that there is some version of Scala that they’re all compatible with, and then use that version for my project, rather than using the version based on the feature set I need. What’s more, if there is no overlap - if one of my dependencies is only compatible with, say, 2.9, and another only builds on 2.7, then I’m hosed. I either have to try to build one or the other on a different version of the compiler, which may or may not work, or use different libraries.</p>

<p>The other bit of craziness is the Eclipse Scala plugin can’t change versions, and, you can’t have more than one version running at a time. Even more fun: the only Scala plugins for Eclipse Juno are for 2.9 and 2.10 - if you have to use 2.8, you’re either going to have to use Indigo, or cross-compile to a newer version of Scala.</p>

<p>All in all, I’d have to say that, as much as I like the idea of Scala, I can’t see using it for anything significant until it becomes more stable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Development Setup]]></title>
    <link href="http://jacklund.github.io/blog/2013/06/21/Scala-Development-Setup/"/>
    <updated>2013-06-21T21:56:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/06/21/Scala-Development-Setup</id>
    <content type="html"><![CDATA[<p>I had this idea for doing a Scala project integrating WebSockets with <a href="http://kafka.apache.org/">Kafka</a>, so I spent a good bit of today trying out different configurations for doing Scala development. My first pass was to try <a href="http://www.jetbrains.com/idea/features/scala.html">IntellijIDEA</a> from JetBrains. I really liked their <a href="http://www.jetbrains.com/ruby/">RubyMine</a> IDE for Ruby, and people were raving about IDEA for Scala development, so I gave it a go.</p>

<p>It’s actually not a bad IDE. I had some trouble navigating, but most of that was because I was so used to Eclipse. However, the big thing that was lacking was good <a href="http://www.scala-sbt.org/">sbt</a> support. Whatever project I was going to use sbt, since that seems to be the builder of choice, and the integration with IDEA seemed to be, well, not really good. You can use sbt to generate the IDEA project, but there didn’t seem to be a good way to have IDEA use the dependencies defined in the sbt build file for the code completion, which seemed to me to be a big problem.</p>

<p>So, I tried out using Eclipse (which wasn’t a stretch since I use it for my Java work), and <a href="https://github.com/typesafehub/sbteclipse">sbteclipse</a>, which is an sbt plugin for Eclipse. It worked really well! Basically, you install the plugin per the instructions, create a minimal sbt build file for the project, and then type <code>sbt eclipse</code> to generate the Eclipse configuration. The cool thing is, you can do this at any time, so if you add a dependency to the build file, just do <code>sbt eclipse</code> again, then refresh the project in Eclipse, and suddenly it has your dependency. Very nice.</p>

<p>The one thing I needed to do, which I eventually found out how to do, was to have sbt use my local maven repository as one of its repositories. sbt uses <a href="http://ant.apache.org/ivy/">ivy</a> under the covers, so Maven integration is there, it just doesn’t know about all the local Maven repositories. to add it, I just had to add the following to my <code>~/.sbt/global.sbt</code> file:</p>

<p><code>
    resolvers += "Local Maven Repository" at "file://"+Path.userHome.absolutePath+"/.m2/repository"
</code></p>

<p>and, voila, it worked!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse with Subversion 1.8 on OS X]]></title>
    <link href="http://jacklund.github.io/blog/2013/06/18/eclipse-with-subversion-1-dot-8-on-os-x/"/>
    <updated>2013-06-18T14:14:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/06/18/eclipse-with-subversion-1-dot-8-on-os-x</id>
    <content type="html"><![CDATA[<p>I wasted a considerable amount of time following the instructions from <a href="http://subclipse.tigris.org/wiki/JavaHL">this page</a> on how to install Subclipse on OS X, trying to get MacPorts to install the right version of Subversion (Why subversion, you may ask? Because a customer is still using it, that’s why…).</p>

<p>It turns out that MacPorts doesn’t even have the 1.8 version of Subversion - it’s only got 1.7, which won’t work with the version of Subclipse I’m using. So, I had to go to <a href="http://www.wandisco.com/subversion/download#osx">WanDisco</a> and download it (after removing the MacPorts versions first), and then everything worked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating RESTEasy Project with Eclipse and Maven]]></title>
    <link href="http://jacklund.github.io/blog/2013/05/20/Creating-RESTEasy-Project-with-Eclipse-and-Maven/"/>
    <updated>2013-05-20T00:00:00-05:00</updated>
    <id>http://jacklund.github.io/blog/2013/05/20/Creating-RESTEasy-Project-with-Eclipse-and-Maven</id>
    <content type="html"><![CDATA[<p>Handy safety tip: to create a RESTEasy-friendly Maven project in Eclipse, do the following:</p>

<ol>
  <li>Create the project as a simple Maven project</li>
  <li>In the project Properties -&gt; Project Facets, make the project faceted, and select “Dynamic Web Module” (you may get a NullPointerException, but it doesn’t seem to matter). Under “Further Configuration…”, point the WebApp directory to be <code>src/main/webapp</code>, and have it create the <code>web.xml</code> file.</li>
  <li>Under “Web Content Settings”, set the Context root</li>
  <li>Under “Deployment Assembly”, select “Add…”, select “Java Build Path Entries”, and select “Maven Dependencies”. It should put them in <code>WEB-INF/lib</code>.</li>
  <li>Add the code and the dependencies to the <code>pom.xml</code>. Make sure to add the RESTEasy stuff to the <code>web.xml</code> file.</li>
</ol>

<p>You should be able to deploy it from Eclipse into Tomcat without any issues</p>
]]></content>
  </entry>
  
</feed>
